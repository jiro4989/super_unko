#!/bin/bash

SCRIPT_NAME="$(basename "${BASH_SOURCE:-$0}")"
readonly SCRIPT_NAME
readonly VERSION=v1.0.1

## main はメイン関数である。スクリプトの末尾で呼び出す。
##
## @param level    うんこの段数
## @param color_r  RGB値のR (0~255)
## @param color_g  RGB値のG (0~255)
## @param color_b  RGB値のB (0~255)
main() {
  local level=$1
  local color_r=$2
  local color_g=$3
  local color_b=$4

  local col
  local row
  local rgb
  col=$(max_stage_col "$level")
  row=$(max_stage_row "$level")
  rgb=$(max_value "$color_r" "$color_g" "$color_b")

  cat << EOS
P3
$col $row
$rgb
EOS
  cat << EOS | align_center 0 | sed -E "s/ /0/g;s/0/0 0 0 /g;s/[^ 0]/$color_r $color_g $color_b /g"
1
1
111
11111
$(stages "$level")
EOS
}

## max_stage_col は段のカラム幅を返す。
##
## @param n うんこの段数
## @return うんこの横幅
max_stage_col() {
  local n=$1
  echo $((11 + 8 * (n - 1) + 2))
}

## max_stage_col は段数を返す。
##
## @param n うんこの段数
## @return うんこの高さ
max_stage_row() {
  local n=$1
  echo $((4 + 4 * n))
}

## max_value は引数のうち最も大きな値を返す。
##
## @param  1
## @param  2
## @param  3
## @return 前述の3つの値のうち、もっとも数値として大きい値
max_value() {
  echo -e "$1\n$2\n$3" | sort -n | tail -n 1
}

## repeat は渡された引数の数分だけ1を出力して返す。
## 返す文字列は1行である。
##
## @param n 何文字繰り返すか
## @param c 出力する文字 (デフォルト: 1)
## @return n回繰り返した1
repeat() {
  local n=$1
  local c=${2:-1}
  seq "$n" |
    while read -r i; do
      echo -n "$c"
    done
}

## stage はうんこの段を返す。
## 引数は段の横幅を指定する。
## 段、はうんこの横野箇所をさす。
## （    ） <- のこと
##
## @param i うんこの段の番号
## @param i番目のうんこ段
stage() {
  local i=$1
  local j=$((i + 2))
  cat << EOS
$(repeat "$i")
$(repeat "$j")
$(repeat "$j")
$(repeat "$i")
EOS
}

## stages は引数に指定した数だけうんこの段を返す。
## たとえば、2を指定したときは以下のようなイメージになる。
##  （   ）
## （     ）
##
## @param n うんこが何段か
## @param n回くりかえしたうんこの段
stages() {
  local n=$1
  seq "$n" | while read -r i; do
    stage $((11 + 8 * (i - 1)))
  done
}

## align_center は標準入力を指定の文字列で埋めて中央寄せする。
##
## @param pad 中央寄せのために詰める文字列
##            全角文字はNG
## @return 中央寄せされた文字列
align_center() {
  local pad="$1"

  # 最も大きい横幅を取得
  local max_width=0
  local lines=()
  while read -r line; do
    local w
    w="$(echo "$line" | grep -o . | wc -l)"

    if [ "$max_width" -lt "$w" ]; then
      max_width=$w
    fi
    lines+=("$line")
  done

  # うんこを1行ずつ出力
  for line in "${lines[@]}"; do
    local w
    w="$(echo "$line" | grep -o . | wc -l)"

    local left_width=$(((max_width - w) / 2))
    local right_width=$((max_width - left_width - w))
    echo "$(repeat "$left_width" "$pad")$line$(repeat "$right_width" "$pad")"
  done
}

## usage はこのスクリプトの使い方を標準出力する。
usage() {
  cat << EOS
$SCRIPT_NAME はうんこをPNM画像として出力するためのコマンドです。

Usage:

    $SCRIPT_NAME [flags] [unko_level]

Examples:

    # 通常の使用方法
    $SCRIPT_NAME 3 > unko3.pnm

    # RGB値を指定する例
    $SCRIPT_NAME 3 -r 255 -g 0 -b 0 > unko_rgb.pnm

    # PNG画像に変換する例（ImageMagickに依存）
    $SCRIPT_NAME 3 -r 255 -g 0 -b 0 | convert - -scale 100x100 /images/t.png

Flags:

    -h, --help          このヘルプを出力する
        --version       バージョン情報を出力する
    -r, --red int       RGB値のRを指定 (0~255) (default: 255)
    -g, --green int     RGB値のGを指定 (0~255) (default: 255)
    -b, --blue int      RGB値のBを指定 (0~255) (default: 255)
    -u, --unko-color    RGB値にうんこ色を指定する

EOS
}

## log はスクリプト名と合わせて、メッセージをエラー出力する。
log() {
  echo -e "$SCRIPT_NAME: $*" >&2
}

## is_empty は引数が空文字列であるかを判定する。
is_empty() {
  [[ -z "$1" ]]
}

## is_opt_key は引数がコマンドライン引数のオプションキーであるかを判定する。
is_opt_key() {
  [[ "$1" =~ ^-+ ]]
}

## validate_opt_value は引数がコマンドオプションの値であるかを判定する。
## 不正な値の場合はシェルを異常終了する。
validate_opt_value() {
  local value=$1
  if is_empty "$value" || is_opt_key "$value"; then
    log "requires an argument -- $value"
    exit 1
  fi
}

## set_opts はコマンドライン引数を解析して変数にセットする。
## セットする変数は下記の通り。
## - opt_red
## - opt_green
## - opt_blue
## - opt_unko_level
## これらの変数はトップレベルの変数として初期値を設定しておくこと。
set_opts() {
  local opt_use_unko_color=false
  while ((0 < $#)); do
    local opt=$1
    shift

    case "$opt" in
      '-h' | '--help')
        usage
        exit
        ;;
      '--version')
        echo $VERSION
        exit
        ;;
      '-r' | '--red')
        local color=$1
        shift
        validate_opt_value "$color"
        opt_red="$color"
        ;;
      '-g' | '--green')
        local color=$1
        shift
        validate_opt_value "$color"
        opt_green="$color"
        ;;
      '-b' | '--blue')
        local color=$1
        shift
        validate_opt_value "$color"
        opt_blue="$color"
        ;;
      '-u' | '--unko-color')
        opt_use_unko_color=true
        ;;
      -*)
        log "illegal option -- $1"
        exit 1
        ;;
      *)
        opt_unko_level=$opt
        ;;
    esac
  done

  if [ "$opt_use_unko_color" = true ]; then
    opt_red=217
    opt_green=112
    opt_blue=2
  fi
}

# テストフラグが付与されている時はmain関数を呼び出さない。
if [ ! "$RUN_TEST" = true ]; then
  # コマンドライン引数を取得
  opt_red=255
  opt_green=255
  opt_blue=255
  opt_unko_level=3
  set_opts ${1+"$@"}

  main "$opt_unko_level" "$opt_red" "$opt_green" "$opt_blue"
fi
